(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{368:function(t,n,a){"use strict";a.r(n);var s=a(42),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"启动runner"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动runner"}},[t._v("#")]),t._v(" 启动runner：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" $ docker run -d --name gitlab-runner --restart always \\\n   -v /srv/gitlab-runner/config:/etc/gitlab-runner \\\n   -v /var/run/docker.sock:/var/run/docker.sock \\\n   gitlab/gitlab-runner:latest\n")])])]),a("h1",{attrs:{id:"注册runner"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册runner"}},[t._v("#")]),t._v(" 注册runner")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('gitlab-runner register\n\n  --non-interactive \\\n  --tls-ca-file=/etc/gitlab/ssl/gitlab.example.com.crt  \\\n  --url "http://218.28.35.120:19081/" \\\n  --registration-token "EXY3_sPSpdVHXtMKYHej" \\\n  --executor "docker" \\\n  --docker-image node:latest \\\n  --description "runner " \\\n  --tag-list "run" \\\n  --run-untagged \\\n  --locked="false"\n  \n  \n')])])]),a("ol",[a("li",[t._v("输入gitlab的服务URL")]),t._v(" "),a("li",[t._v("输入gitlab-ci的Toekn")]),t._v(" "),a("li",[t._v("关于集成服务中对于这个runner的描述")]),t._v(" "),a("li",[t._v("给这个gitlab-runner输入一个标记，这个tag非常重要，在后续的使用过程中需要使用这个tag来指定gitlab-runner")]),t._v(" "),a("li",[t._v("是否运行在没有tag的build上面。在配置gitlab-ci的时候，会有很多job，每个job可以通过tags属性来选择runner。这里为true表示如果job没有配置tags，也执行")]),t._v(" "),a("li",[t._v("是否锁定runner到当前项目")]),t._v(" "),a("li",[t._v("选择执行器，gitlab-runner实现了很多执行器，可用在不同场景中运行构建，详情可见"),a("a",{attrs:{href:"https://docs.gitlab.com/runner/executors/README.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitLab Runner Executors"),a("OutboundLink")],1),t._v("，这里选用Docker模式")])]),t._v(" "),a("h1",{attrs:{id:"runner的基本命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#runner的基本命令"}},[t._v("#")]),t._v(" runner的基本命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("查看状态\ngitlab-runner status\n\n查看runner服务\ngitlab-ci-multi-runner list\n        \n重启runner，发现他会自动去执行触发runner的任务\n执行gitlab-ci-multi-runner restart\n")])])]),a("h1",{attrs:{id:"编写-gitlab-ci-yml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写-gitlab-ci-yml"}},[t._v("#")]),t._v(" 编写.gitlab-ci.yml")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# docker镜像\nimage: node\n# 依赖的docker服务\nservices:\n  - postgres\n# 开始执行脚本前所需执行脚本\nbefore_script:\n  - bundle install\n# 脚本执行完后的钩子，执行所需脚本\nafter_script:\n  - rm secrets\n# 该ci pipeline适合的场景\nstages:\n  - build\n  - test\n  - deploy\n# 定义的任务1\njob1:\n  # 场景为构建\n  stage: build\n  # 所需执行的脚本\n  script:\n    - execute-script-for-job1\n  # 在哪个分支上可用\n  only:\n    - master\n  # 指定哪个ci runner跑该工作\n  tags:\n    - docker\n")])])]),a("h1",{attrs:{id:"解决gitlab-runner执行docker命令提示权限不足的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决gitlab-runner执行docker命令提示权限不足的问题"}},[t._v("#")]),t._v(" 解决gitlab-runner执行docker命令提示权限不足的问题")]),t._v(" "),a("ol",[a("li",[t._v("将gitlab-runner用户添加到docker组")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("sudo usermod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("aG docker gitlab"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("runner\n")])])]),a("ol",[a("li",[t._v("验证是否生效：")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("sudo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("u gitlab"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("runner "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("H")]),t._v(" docker info\n")])])]),a("h1",{attrs:{id:"完整配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完整配置"}},[t._v("#")]),t._v(" 完整配置：")]),t._v(" "),a("p",[a("strong",[t._v("Dockerfile")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("FROM nginx\nRUN mkdir /app\nCOPY /dist /app\nCOPY nginx.conf /etc/nginx/nginx.conf\n")])])]),a("p",[t._v("打包完成后创建nginx镜像")]),t._v(" "),a("p",[t._v("步骤：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在镜像的根目录创建app文件夹")])]),t._v(" "),a("li",[a("p",[t._v("将打包后的文件复制过去 （/dist 指的是当前项目路径）")])]),t._v(" "),a("li",[a("p",[t._v("将项目中的nginx配置文件作为镜像的配置文件")])])]),t._v(" "),a("p",[a("strong",[t._v("nginx.conf")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('user  nginx;\nworker_processes  1;\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\nevents {\n  worker_connections  1024;\n}\nhttp {\n  include       /etc/nginx/mime.types;\n  default_type  application/octet-stream;\n  log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                    \'$status $body_bytes_sent "$http_referer" \'\n                    \'"$http_user_agent" "$http_x_forwarded_for"\';\n  access_log  /var/log/nginx/access.log  main;\n  sendfile        on;\n  keepalive_timeout  65;\n  server {\n    listen       80;\n    server_name  localhost;\n    location / {\n      root   /app;\n      index  index.html;\n      try_files $uri $uri/ /index.html;\n    }\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n      root   /usr/share/nginx/html;\n    }\n  }\n}\n')])])]),a("p",[a("strong",[t._v("gitlab-ci.yml")])]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stages")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Stages 表示构建阶段，这里有两个阶段 install, deploy")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" build\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" deploy\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("project_build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Jobs 表示构建工作，表示某个 Stage 里面执行的工作。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" build\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义了只有在被merge到了dev分支上 才会执行部署脚本。")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" njx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("dev\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tags")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" vue\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "=====开始依赖安装======"\n        '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" npm install "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("verbose "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("registry=https"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//registry.npm.taobao.org "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#安装依赖")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "=====开始打包======"\n        '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" npm run build\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("artifacts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将这个job生成的依赖传递给下一个job。需要设置dependencies")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("expire_in")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 30 mins "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# artifacets 的过期时间，因为这些数据都是直接保存在 Gitlab 机器上的，过于久远的资源就可以删除掉了")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("paths")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要被传递给下一个job的目录。")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" dist/\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("project_deploy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" deploy\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" njx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("dev\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tags")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" vue\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "=====开始部署======"\n        '),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ls\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" docker build . "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("t finance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("lastest\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" docker stop finance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("container\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" docker rm finance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("container\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" docker run "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("d "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p 8084"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("80 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("name finance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("container finance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("lastest\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - sudo cp -r dist/* /usr/local")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - sudo cd /usr/local")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ls\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' echo "=====结束部署======"\n\n')])])]),a("h1",{attrs:{id:"修改runner详细配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改runner详细配置"}},[t._v("#")]),t._v(" 修改runner详细配置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('vi /etc/gitlab-runner/\nconcurrent = 4\ncheck_interval = 0\n\n[session_server]\n    session_timeout = 1800\n\n[[runners]]\n    name = "myrunner with docker executor"\n    url = "http://${gitlabIP}"  #gitlab地址\n    #特别注意，这个token不是小本本上的token！！！\n    token ="......"\n    executor = "docker"\n    [runners.docker]\n        host = ""\n        hostname = ""\n        privileged = false\n        tls_verify = false\n        disable_entrypoint_overwrite = false\n        oom_kill_disable = false\n        disable_cache = true\n        pull_policy = "if-not-present"\n        #这是runner的默认镜像；具体镜像maven:3-jdk-8在.gitlab-ci.yml中配置\n        image = "busybox:latest"  \n        helper_image = "gitlab-runner-helper:x86_64-f100a208"\n        #映射maven配置\n        volumes = ["/home/v_in_docker/:/usr/share/maven/conf2/:rw"]\n        [runners.docker.sysctls]\n            "net.ipv4.ip_forward" = "1"\n    [runners.cache]\n        [runners.cache.s3]\n        [runners.cache.gc3]\n12345678910111213141516171819202122232425262728293031\n')])])]),a("h5",{attrs:{id:"runners-docker-sysctls-作用等效于"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#runners-docker-sysctls-作用等效于"}},[t._v("#")]),t._v(" [runners.docker.sysctls] 作用等效于")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vi")]),t._v(" /etc/sysctl.conf\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#加一行：")]),t._v("\nnet.ipv4.ip_forward"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" sysctl -p\n")])])]),a("h1",{attrs:{id:"runner执行器为docker时发生的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#runner执行器为docker时发生的问题"}},[t._v("#")]),t._v(" runner执行器为docker时发生的问题：")]),t._v(" "),a("h2",{attrs:{id:"_1、找不到docker命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、找不到docker命令"}},[t._v("#")]),t._v(" 1、找不到docker命令")]),t._v(" "),a("blockquote",[a("p",[t._v("$ docker info\n/bin/bash: line 81: docker: command not found\nERROR: Job failed: exit code 1")])]),t._v(" "),a("p",[t._v("解决：在编写gitlab-runner的docker-compose.yml时候，加上挂载宿主机docker命令。实现"),a("code",[t._v("docker in docker")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  privileged: true\n    volumes:\n      # 映射docker命令\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /bin/docker:/bin/docker\n\n")])])]),a("h2",{attrs:{id:"_2、没有docker权限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、没有docker权限"}},[t._v("#")]),t._v(" 2、没有docker权限")]),t._v(" "),a("blockquote",[a("p",[t._v("Got permission denied while trying to connect to the Docker")])]),t._v(" "),a("p",[t._v("解决：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('#则需要把将当前用户加入docker组\nsudo gpasswd -a ${USER} docker\n\n#或者将当前用户直接加到文件中\nsudo echo "docker:x:994:${USER}" >> /etc/group\n\n#查看docker用户组成员\ncat /etc/group |grep docker\n\n#重新启动docker服务\nsudo systemctl restart docker\n\n# 赋予权限\nsudo chmod a+rw /var/run/docker.sock\n\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('before_script:\n  - docker info\n  - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" "$CI_REGISTRY"\n')])])])])}),[],!1,null,null,null);n.default=e.exports}}]);